const path = require("path");
const fs = require("fs");
const { createCanvas, loadImage, registerFont } = require("canvas");
const QRCode = require("qrcode");
const RestaurantModel = require("../models/restaurant-model");
const QRCodeModel = require("../models/qrcode-model");
const { uploadImage } = require("../config/cloudinary");

module.exports.GenerateQRCode = async (req, res) => {
  try {
    if (!req.user?.id) {
      return res.status(401).json({ message: "Unauthorized" });
    }

    const restaurant = await RestaurantModel.findById(req.user.id);
    if (!restaurant) {
      return res.status(404).json({ message: "Restaurant not found" });
    }

    let QrColor = req.body.foregroundColor
      ? req.body.foregroundColor
      : "#0000ff";
    let QrCodeBg = req.body.backgroundColor
      ? req.body.backgroundColor
      : "#ffffff";
    const slug = restaurant.slug;
    const restaurantName = restaurant.restaurantName;
    const qrUrl = `${process.env.FRONTEND_URI}menu/${slug}`;

    const qrDataUrl = await QRCode.toDataURL(qrUrl, {
      errorCorrectionLevel: "L",
      type: "image/png",
      width: 300,
      color: {
        dark: QrColor, // Blue
        light: QrCodeBg, // White
      },
    });

    let fontPathManrope = path.join(
      __dirname,
      "../public/fonts/Oswald/Oswald-VariableFont_wght.ttf"
    );
    console.log(fontPathManrope);
    registerFont(fontPathManrope, { family: "Oswald" });
    // Generate QR Code as a data URL
    // Canvas size: QR + space for text
    const scaleFactor = 3; // or 3 for even higher resolution
    const width = 400 * scaleFactor;
    const height = 500 * scaleFactor;
    const canvas = createCanvas(width, height);
    const ctx = canvas.getContext("2d");

    // Fill white background
    ctx.fillStyle = "#fff";
    ctx.fillRect(0, 0, width, height);

    // Load QR Code and draw it
    const qrImage = await loadImage(qrDataUrl);
    ctx.drawImage(
      qrImage,
      50 * scaleFactor,
      50 * scaleFactor,
      300 * scaleFactor,
      300 * scaleFactor
    );

    // Draw Restaurant Name

    ctx.font = `${20 * scaleFactor}px Oswald`;
    ctx.fillStyle = "#000";
    ctx.textAlign = "center";
    ctx.fillText(restaurantName, width / 2, 380 * scaleFactor);

    ctx.font = `${10 * scaleFactor}px Oswald`;
    // Draw "Generated by DigiDine"
    ctx.fillStyle = "#888";
    ctx.fillText("Generated by DigiDine", 330 * scaleFactor, 490 * scaleFactor);

    // Save final image
    const qrDir = path.join(__dirname, "../public/uploads/user/qr-code");
    fs.mkdirSync(qrDir, { recursive: true });

    const filePath = path.join(qrDir, `${slug}.png`);
    const buffer = canvas.toBuffer("image/png");
    fs.writeFileSync(filePath, buffer);
    const Image = fs.readFileSync(filePath);

    let cloudinaryUploadResponse = await uploadImage(filePath);
    console.log("cloudinary upload response ", cloudinaryUploadResponse);
    const relativePath = `public/uploads/user/qr-code/${slug}.png`;

    const StoreQr = await QRCodeModel.create({
      restaurant: req.user.id,
      slugUrl: slug,
      qrImageUrl: cloudinaryUploadResponse.secure_url,
    });

    if (StoreQr) {
      res.status(200).json({
        message: "Custom QR Code generated",
        data: StoreQr,
        qrCodeUrl: relativePath,
      });
    }
  } catch (err) {
    console.error("QR Code generation failed:", err);
    return res.status(500).json({ message: "QR Code generation failed" });
  }
};

module.exports.FetchQrCode = async (req, res) => {
  try {
    let findQrCode = await QRCodeModel.findOne({ restaurant: req.user.id });
    if (!findQrCode) return res.status(503).json({ status: 0 });
    res.status(200).json({ status: 1, data: findQrCode });
  } catch (err) {
    console.log(err);
  }
};
